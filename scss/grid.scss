// ------------------ 
//
//  HELPER FUNCTIONS 
//
// ------------------

// strip unit from a number
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

// find type of amount, e.g columns, fraction, or a unit such as %, em or rem
@function find-type($n) {
	@if(unitless($n)) {
		@if(round($n) == $n) { 
			@return columns; 
		}
		@else { 
			@return fraction; 
		}
	}
	@else {
		@return units($n);
	}
}

@function calc-em($amount) {}
@function calc-rem($amount) {}
@function calc-px($amount) {}

// turn percentage into fraction, and use that
@function calc-percentage($amount) { 
	@return $grid-width * strip-units($amount)/strip-units($grid-width); 
}

@function calc-fraction($fraction) { 
	@return $grid-width * $fraction; 
}

@function calc-column($columns) { 
	@return $columns/$number-of-columns * $grid-width; 
}

@function calc($amount, $type) {
	@if($type == null) {
		$calced-amount: find-type($amount);
	}

	@if($type == fraction) {
		$calced-amount: calc-fraction($amount);
	}
	@else if($type == cols or $type == columns or $type == col or $type == column) {
		$calced-amount: calc-column($amount);
	}
	@else if($type == percentage) {
		$calced-amount: calc-percentage($amount);
	}

	@return $calced-amount;
}


// ------------------ 
//
//  MIXINS 
//
// ------------------

@mixin col($amount, $gutter:$default-grid-gutter, $type:null) {
	box-sizing: border-box; // find nice way of doing this
	float: left; // implement negative margins grid aswell?
	padding: $gutter;
	width: calc($amount);
}

// push the column right
@mixin push($amount, $type:null) {
	margin-left: calc($amount, $type);
}

// pull the column left
@mixin pull($amount, $type:null) {
	margin-left: unary_minus(calc($amount, $type));
}

// margin in given direction
@mixin offset($direction, $amount, $type:null) {

	@if($direction == left or $direction == right) {
		$margin: calc($amount, $type);
	}
	@else {
		// we don't follow the grid vertically, look at vertical harmony?
		$margin: $amount;
	}

	margin-#{$direction}: $margin;
}

// Make images respond to size of container
@mixin responsive-image() {
	width: 100%;
    height: auto;
    display: block;
}

@mixin vendor-prefix($name, $argument, $remove-prefix:false) {
	@if($remove-prefix == false) {
		-webkit-#{$name}: $argument;
		-ms-#{$name}: $argument;
		-moz-#{$name}: $argument;
		-o-#{$name}: $argument;
	}
	#{$name}: $argument;
}